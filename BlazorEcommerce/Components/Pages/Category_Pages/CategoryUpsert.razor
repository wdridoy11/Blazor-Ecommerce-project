@page "/category/create";
@page "/category/update/{id:int}"
@inject ICategoryRepository _categoryRepository;
@inject NavigationManager _navigationManager
@inject IJSRuntime _JS

@if(IsProcessing)
{
    <div>
        <dvi>
            <p>Loading.....</p>
        </dvi>
    </div>
}
else
{
    <div class="bg-black">
        <div class="m-5 mx-auto max-w-5xl rounded-lg bg-white p-10">
            <div>
                <div>
                    <h3 class="mb-5 text-3xl font-medium">@(Id == 0? "Create": "Update") Category</h3>
                </div>
                <div>
                    <EditForm Model="Category" FormName="CategoryUpsertForm" OnValidSubmit="UpsertCategory">
                        <DataAnnotationsValidator />

                        <label for="Name">Category Name</label>
                        <InputText @bind-Value="Category.Name" class="w-full rounded-md border-2 border-gray-400 p-2" />
                        <ValidationMessage For="@(()=>Category.Name)" />

                        <div class="mt-3 flex items-center justify-between">
                            <div>
                                <button type="submit" class="inline-block rounded-full bg-blue-600 px-6 py-3 text-white">
                                    <i class="fa-solid fa-floppy-disk"></i> @(Id == 0 ? "Create" : "Update")
                                </button>
                            </div>
                            <div>
                                <a href="/category" class="inline-block rounded-full bg-gray-600 px-6 py-3 text-white">
                                    <i class="fa-solid fa-angle-left"></i> Back To Category
                                </a>
                            </div>
                           
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    public bool IsProcessing { get; set; } = false;

    [SupplyParameterFromForm]
    private Category Category { get; set; } = new Category();


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await LoadCategory();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadCategory()
    {
        if(Id>0)
        {
            Category = await _categoryRepository.GetAsync(Id);
        }
    }


    private async Task UpsertCategory()
    {
        IsProcessing = true;
        if(Category.Id == 0)
        {
            await _categoryRepository.CreateAsync(Category);
            // await _JS.ToastrSuccess("Category Created Successfully");
        }
        else
        {
            await _categoryRepository.UpdateAsync(Category);
            // await _JS.ToastrError("Category Update Successfully");
        }

        IsProcessing = false;
        _navigationManager.NavigateTo("/category");
    }



}
