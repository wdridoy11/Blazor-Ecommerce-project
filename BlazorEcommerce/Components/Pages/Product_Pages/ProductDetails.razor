@page "/product/Details/{id:int}"
@using BlazorEcommerce.Services
@inject IProductRepository _productRepository
@inject IJSRuntime _JSRuntime
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navigationManager
@inject ICartRepository _cartRepository
@inject SharedStateService _sharedStateService
@if (IsProcessing)
{
    <div>
        <div>
            <p>Loading.....</p>
        </div>
    </div>
}
else
{
    <div>
        <div class="container mx-auto px-5">
            <div class="">
                <div class="grid grid-cols-1 items-center gap-10 lg:grid-cols-2">
                    <div class="shadow-md">
                        <div class="">
                            <img src=@Product.ImageUrl
                                 alt=@Product.Name
                                 class="mx-auto h-[600px] w-1/2 object-cover" />
                        </div>
                    </div>

                    <div>

                        @* Product Information *@
                        <h1 class="mb-2 text-3xl font-bold text-gray-900">@Product.Name</h1>
                        <div>
                            <div class="flex items-center">
                                <span class="font-medium text-green-600">(@Product.StockQuantity) In Stock</span>
                            </div>
                            <div class="mb-6 flex items-center space-x-4">
                                <span class="text-3xl font-bold text-blue-600">$@Product.Price</span>
                                <del class="text-xl text-gray-500 line-through">$@Product.DiscountPrice</del>
                            </div>
                        </div>

                        @* Add to Cart Button *@


                        <div>
                            <div class="mt-5 flex space-x-4">
                                <button class="flex-1 rounded-lg bg-blue-600 px-6 py-3 font-semibold text-white transition duration-300 hover:bg-blue-700"
                                        @onclick="() => AddOrderItem(Product)">
                                        Add to Cart
                                </button>
                                <button class="rounded-lg border border-gray-300 px-6 py-3 transition duration-300 hover:bg-gray-50">
                                    <i class="fa-solid fa-heart"></i>
                                </button>
                                <button class="rounded-lg border border-gray-300 px-6 py-3 transition duration-300 hover:bg-gray-50">
                                    <i class="fa-solid fa-share-nodes"></i>
                                </button>
                            </div>

                            <div class="mt-5 space-y-3 rounded-lg bg-gray-50 p-4">
                                <div class="flex items-center space-x-3">
                                   <i class="fa-solid fa-truck"></i>
                                   <span class="text-sm">Free shipping on orders over $50</span>
                                </div>
                                <div class="flex items-center space-x-3">
                                    <i class="fa-solid fa-shield"></i>
                                    <span class="text-sm">2-year warranty included</span>
                                </div>
                                <div class="flex items-center space-x-3">
                                    <i class="fa-solid fa-rotate"></i>
                                    <span class="text-sm">30-day return policy</span>
                                </div>
                            </div>
                        </div>

                      </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private bool IsProcessing { get; set; } = false;
    private Product Product { get; set; } = new Product();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await LoadProducts();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadProducts()
    {
        Product = await _productRepository.GetAsync(Id);
    }

    // Product Add to cart
    private async Task AddOrderItem(Product product)
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var authenticated = user.Identity is not null && user.Identity.IsAuthenticated;
        if (!authenticated)
        {
            _navigationManager.NavigateTo("Account/login");
        }
        else
        {
            // add to cart item
            var userId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
            var result = await _cartRepository.UpdateCartAsync(userId, product.Id, 1);
            _sharedStateService.TotalCartCount = await _cartRepository.GetTotalCartCountAsync(userId);
            if(result)
            {
                await _JSRuntime.InvokeVoidAsync("showSwal", "success", "Cart Added Successfully");
            }
            else
            {
                await _JSRuntime.InvokeVoidAsync("showSwal", "error", "Something is wrong!");
            }
        }
    }

}
