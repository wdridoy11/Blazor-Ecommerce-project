@page "/cart"
@using System.Globalization
@using BlazorEcommerce.Services
@using System.Linq;
@inject ICartRepository _cartRepository
@inject IJSRuntime _JSRuntime
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navigationManager
@inject SharedStateService _sharedStateService

@if (IsProcessing)
{
    <div>
        <dvi>
            <p>Loading.....</p>
        </dvi>
    </div>
}
else
{
    @if(shoppingCarts.Any())
    {
        <div class="bg-[#EFF3F6] p-5">
            <div class="container mx-auto px-5">
                <div>
                    <div class="grid grid-cols-3 gap-5">
                        <div class="col-span-2 rounded-md bg-white p-5">
                            <div>
                                <table class="w-full table-fixed">
                                    <thead>
                                        <tr class="text-left">
                                            <th>Product</th>
                                            <th>Price</th>
                                            <th>Quantity</th>
                                            <th>Total Price</th>
                                            <th>Action</th>
                                        </tr>
                                    </thead>
                                    @foreach(var cartItem in shoppingCarts)
                                    {
                                        <tbody>
                                            <tr class="items-center">
                                                <td>
                                                    <div class="flex items-center gap-5">
                                                        <div>
                                                            <img class="h-20 w-20 rounded-md" src="@cartItem.Product.ImageUrl" alt="@cartItem.Product.Name" />
                                                        </div>
                                                        <div>
                                                            <h4>@cartItem.Product.Name</h4>
                                                        </div>
                                                    </div>
                                                </td>
                                                <td> @cartItem.Product.Price.ToString("c", CultureInfo.GetCultureInfo("en-us")) </td>
                                                <td>
                                                    <div class="flex items-center space-x-3">
                                                        <button class="rounded-md border border-gray-300 p-2 hover:bg-gray-50" @onclick='() => HandleQuantityCounter(cartItem.ProductId, -1)'>
                                                            <i class="fa-solid fa-minus"></i>
                                                        </button>

                                                        <span class="min-w-[60px] rounded-md border border-gray-300 px-4 py-2 text-center">@cartItem.Count</span>

                                                        <button class="rounded-md border border-gray-300 p-2 hover:bg-gray-50" @onclick='() => HandleQuantityCounter(cartItem.ProductId, 1)'>
                                                            <i class="fa-solid fa-plus"></i>
                                                        </button>
                                                    </div>
                                                </td>
                                                <td>
                                                    @* <h4>@cartItem.Product.Price.ToString("c", CultureInfo.GetCultureInfo("en-us"))</h4> *@
                                                    <h4>@(cartItem.Product.Price* cartItem.Count)</h4>
                                                </td>
                                                <td>
                                                    <button
                                                        @onclick="()=>CartItemDelete(cartItem.Id)"
                                                        class="rounded-md bg-red-600 px-3 py-2 text-white">
                                                        <i class="fa-solid fa-trash-can"></i>
                                                    </button>
                                                </td>
                                            </tr>
                                        </tbody>
                                    }
                                </table>
                            </div>
                            <div>
                            </div>
                        </div>
                        <div class="col-span-1 rounded-md bg-white p-5">
                            <h3 class="mb-2 text-2xl font-semibold">Checkout Summary</h3>
                            <hr />
                            <div>
                                <div class="flex items-center justify-between border-b border-dashed py-2">
                                    <p>Subtotal</p>
                                    <p>@foreach (var cartItem in shoppingCarts) { @cartItem.Product.Price}</p>
                                </div>
                                <div class="flex items-center justify-between border-b border-dashed py-2">
                                    <p>Online Fee</p>
                                    <p>100</p>
                                </div>
                                <div class="flex items-center justify-between border-b border-dashed py-2">
                                    <p>Total</p>
                                    <p>1100</p>
                                </div>
                                <div class="flex items-center justify-between border-b border-dashed py-2">
                                    <strong>Payable Total</strong>
                                    <p>11000</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="p-4">
            <div class="rounded-md bg-yellow-300 p-10">
                Your cart is empty! Please add items to cart.
            </div>
        </div>
        @foreach(var cart in shoppingCarts)
        {
            <p>(@cart.Count ? "0":"1")</p>
        }
    }
}

@code {
    private IEnumerable<ShoppingCart> shoppingCarts = new List<ShoppingCart>();
    private bool IsProcessing { get; set; } = false;
    private int QuantityCounter { get; set; } = 1;
    private string UserId { get; set; }

    protected override Task OnInitializedAsync()
    {
        int count = shoppingCarts.Count(); // Make sure to add 'using System.Linq;'
        for (int i = 0; i < count; i++)
        {
            Console.Write("Result : ", i );
        }

        return Task.CompletedTask;
    }


    // 
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCart();
            IsProcessing = false;
            StateHasChanged();
        }
      
    }

    // Load Cart product
    private async Task LoadCart()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var userId = user?.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                shoppingCarts = await _cartRepository.GetAllAsync(userId);
                UserId = userId;
            }
        }
    }

    // Quantity Counter
    private async Task HandleQuantityCounter(int productId, int updateBy)
    {
        var result = await _cartRepository.UpdateCartAsync(UserId, productId, updateBy);
        _sharedStateService.TotalCartCount = await _cartRepository.GetTotalCartCountAsync(UserId);
        await LoadCart();
    }

    private async Task CartItemDelete(int Id)
    {
        bool isConfirmed = await _JSRuntime.InvokeAsync<bool>("isConfirm", "You will delete category");
        if (isConfirmed)
        {
            IsProcessing = true;
            await _cartRepository.DeleteAsync(Id);
            IsProcessing = false;
        }
    }
}
